<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="live.itrip.admin.dao.ClientApiKeyMapper">

    <resultMap id="BaseResultMap" type="live.itrip.admin.model.ClientApiKey">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="client_name" property="clientName" jdbcType="VARCHAR"/>
        <result column="api_key" property="apiKey" jdbcType="CHAR"/>
        <result column="secret_key" property="secretKey" jdbcType="CHAR"/>
        <result column="source" property="source" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="is_delete" property="isDelete" jdbcType="CHAR"/>
        <result column="create_time" property="createTime" jdbcType="BIGINT"/>
        <result column="update_time" property="updateTime" jdbcType="BIGINT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, client_name, api_key, secret_key, source, description, is_delete, create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer"
            flushCache="false" useCache="true">
        select
        <include refid="Base_Column_List"/>
        from client_api_key
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" flushCache="true">
    delete from client_api_key
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="live.itrip.admin.model.ClientApiKey"
            keyProperty="id" useGeneratedKeys="true" flushCache="true">
    insert into client_api_key (id, client_name, api_key, 
      secret_key, source, description,
      is_delete, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{clientName,jdbcType=VARCHAR}, #{apiKey,jdbcType=CHAR}, 
      #{secretKey,jdbcType=CHAR}, #{source,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR},
      #{isDelete,jdbcType=CHAR}, #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}
      )
  </insert>
    <insert id="insertSelective" parameterType="live.itrip.admin.model.ClientApiKey"
            keyProperty="id" useGeneratedKeys="true" flushCache="true">
        insert into client_api_key
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="clientName != null">
                client_name,
            </if>
            <if test="apiKey != null">
                api_key,
            </if>
            <if test="secretKey != null">
                secret_key,
            </if>
            <if test="source != null">
                source,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="isDelete != null">
                is_delete,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="clientName != null">
                #{clientName,jdbcType=VARCHAR},
            </if>
            <if test="apiKey != null">
                #{apiKey,jdbcType=CHAR},
            </if>
            <if test="secretKey != null">
                #{secretKey,jdbcType=CHAR},
            </if>
            <if test="source != null">
                #{source,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null">
                #{isDelete,jdbcType=CHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="live.itrip.admin.model.ClientApiKey" flushCache="true">
        update client_api_key
        <set>
            <if test="clientName != null">
                client_name = #{clientName,jdbcType=VARCHAR},
            </if>
            <if test="apiKey != null">
                api_key = #{apiKey,jdbcType=CHAR},
            </if>
            <if test="secretKey != null">
                secret_key = #{secretKey,jdbcType=CHAR},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                desc = #{description,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null">
                is_delete = #{isDelete,jdbcType=CHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="live.itrip.admin.model.ClientApiKey" flushCache="true">
    update client_api_key
    set client_name = #{clientName,jdbcType=VARCHAR},
      api_key = #{apiKey,jdbcType=CHAR},
      secret_key = #{secretKey,jdbcType=CHAR},
      source = #{source,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <!--自定义查询-->
    <select id="selectAllKeys" resultMap="BaseResultMap" parameterType="java.lang.Integer"
            flushCache="false" useCache="true">
        select
        <include refid="Base_Column_List"/>
        from client_api_key
    </select>

    <select id="countAll" resultType="int">
        select count(id) from client_api_key
    </select>
    <select id="selectApikeys" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from client_api_key
        WHERE TRUE
        <if test="queryContent != null and queryContent != '' ">
            AND  client_name LIKE ${queryContent}
        </if>
        limit ${start},${length}
    </select>
</mapper>