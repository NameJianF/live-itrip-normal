<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="live.itrip.web.dao.AdminRolePermissionMapper">
    <resultMap id="BaseResultMap" type="live.itrip.web.model.AdminRolePermission">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="role_id" property="roleId" jdbcType="INTEGER"/>
        <result column="module_id" property="moduleId" jdbcType="INTEGER"/>
        <result column="operation" property="operation" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="BIGINT"/>
        <result column="update_time" property="updateTime" jdbcType="BIGINT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, role_id, module_id, operation, create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from admin_role_permission
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from admin_role_permission
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="live.itrip.web.model.AdminRolePermission">
    insert into admin_role_permission (id, role_id, module_id, 
      operation, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{moduleId,jdbcType=INTEGER}, 
      #{operation,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}
      )
  </insert>
    <insert id="insertSelective" parameterType="live.itrip.web.model.AdminRolePermission">
        insert into admin_role_permission
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="moduleId != null">
                module_id,
            </if>
            <if test="operation != null">
                operation,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="moduleId != null">
                #{moduleId,jdbcType=INTEGER},
            </if>
            <if test="operation != null">
                #{operation,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="live.itrip.web.model.AdminRolePermission">
        update admin_role_permission
        <set>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=INTEGER},
            </if>
            <if test="moduleId != null">
                module_id = #{moduleId,jdbcType=INTEGER},
            </if>
            <if test="operation != null">
                operation = #{operation,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="live.itrip.web.model.AdminRolePermission">
    update admin_role_permission
    set role_id = #{roleId,jdbcType=INTEGER},
      module_id = #{moduleId,jdbcType=INTEGER},
      operation = #{operation,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <!--add-->
    <select id="selectPermissionsByRoleId" resultType="java.util.Map" parameterType="map">
        select admin_role_permission.role_id
                , admin_role_permission.module_id
                , admin_role_permission.operation
                , admin_module.parent_id
        from admin_role_permission
        INNER JOIN admin_module ON admin_role_permission.module_id = admin_module.id
        where admin_role_permission.role_id = ${roleId}
    </select>

    <delete id="deleteByRoleId" parameterType="map">
        delete from admin_role_permission
        where role_id = ${roleId}
    </delete>

    <insert id="batchInsert" parameterType="java.util.List">
        insert into admin_role_permission (role_id, module_id,operation, create_time, update_time)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.roleId},#{item.moduleId},#{item.operation},#{item.createTime},#{item.updateTime})
        </foreach>
    </insert>
</mapper>